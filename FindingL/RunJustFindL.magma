load "../FindL.magma";

// A function to check if L is well-formed
WellFormed := function(L,p,s,m)
	sigma := 1+ Floor(Log(p,Max(L)));
	wellformed := sigma lt s*m;
	for a in [0..sigma-1] do
		wellformed := wellformed and (p^a in L);
	end for;
	included := 1;
	for b in [2..p-1] do
		bincluded := true;
		for a in [0..sigma-1] do
			bincluded := bincluded and (b*p^a in L);
		end for;
		if bincluded and included ne b-1 then
			wellformed := false;
		elif bincluded and included eq b-1 then
			included := b;
		end if;
	end for;
	return wellformed;
end function;



// Compute Ls, check if they are well formed and store the results.
p := 5; s := 2; m := 2;
q := p^s;
n := q^m-1;
for r in [3..n] do
	if p eq 2 then
		U := {3} join ({p^a : a in {0..s-1}} meet {1..r});
	else
		U := {2} join ({p^a : a in {0..s-1}} meet {1..r}); 
	end if;
	Ls := FindL(p,s,m,r,U,true);
	Ls := [Sort(SetToSequence(L)) : L in Ls];
		oneWell := &or[WellFormed(L,p,s,m) : L in Ls];
	fprintf "Lresultsq"cat IntegerToString(q) cat".csv", "%o;%o;%o;%o;%o;%o;%o;%o\n", 
   		p,s,m,r,#Ls[1],#Ls,oneWell,Ls;
   	if not oneWell then
   		print "p,s,m,r",p,s,m,r;
   		break r;
   	end if;
end for;

quit;