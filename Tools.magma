/*MIT License

Copyright (c) 2022 FrejaElbro

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.*/

// FoundSecretKey(Xguess,G,r): vector, matrix, integer -> bool
// Outputs whether AlternantCode(Xguess,Xguess,r) is equal to the linear code generated by G
FoundSecretKey := function(Xguess,G,r)
    fq  := BaseRing(G);
    if #Xguess ne #SequenceToSet(Xguess) then
        print "FoundSecretKey", false;
        return false;
    end if;
    fsk := AlternantCode(Xguess,Xguess,r,fq) eq LinearCode(G);
    print "Found Secret key", fsk;
    return fsk;
end function;


/* linearise the system of equations
    return a set of linearly independant equations
    parameters verb:=true to have the Faugere Verbose mode (default false) */ 
function Linearize(syst : verb:=false)
     if syst eq [] then return syst;end if;
     vbFaugere := GetVerbose("Faugere");
     if verb then SetVerbose("Faugere",2);
     else SetVerbose("Faugere",0);
     end if;
     dmax := Max({Degree(u) : u in syst});
     R := Parent(syst[1]);
     // take the same ordering as R, but eliminate the homogenization variable
     Mord := MonomialOrderWeightVectors(R);// set of n sequences of size n
     NewMord := [u cat [0] : u in Mord] cat [[0 : i in [1..Rank(R)]] cat [1]];
     Id := ideal<R|syst[1]>;
     IdH, mapRtoRH := Homogenization(Id,false); // the variable H is the last one
     RH := ChangeOrder(mapRtoRH(R),"weight",&cat NewMord);
     systH := [RH!mapRtoRH(u)*RH.Rank(RH)^(dmax-Degree(u)) : u in syst];
     Gb := GroebnerBasis(systH,dmax);
     mapRHtoR := hom<RH->R | [R.i :  i in [1..Rank(R)]] cat [1]>;
     syst := [mapRHtoR(u) : u in Gb];
     SetVerbose("Faugere",vbFaugere);
     return syst;
end function;


// Our implementation of the Sidelnikov-Shestakov attack on GRS-codes
SidelShestaAttack := function(base,fqm)
    n := Ncols(base);
    GRScode := LinearCode(base);
    Pmat := ParityCheckMatrix(GRScode);
    LastColumn := Matrix(Nrows(Pmat),1, [ -&+[Pmat[i,j] : j in [1..Ncols(Pmat)]] : i in [1..Nrows(Pmat)]] );
    extendedP := HorizontalJoin(Pmat,LastColumn);
    IU := ParityCheckMatrix(LinearCode(extendedP));

    // Setup linear system
    eqMat := Matrix(fqm,0,n,[]);
    for i1 in [1..Nrows(IU)] do
        for i2 in [i : i in [1..Nrows(IU)] | i ne i1] do
            for j in [Nrows(IU)+1..n] do
                eqline := [Zero(fqm) : i in [1..n]];
                eqline[i1] := -IU[i1,j] / IU[i2,j];
                eqline[i2] := IU[i1,n+1] / IU[i2,n+1];
                eqline[j]  := IU[i1,j] / IU[i2,j]- IU[i1,n+1] / IU[i2,n+1];
                eqline := Matrix(fqm,1,n,eqline);
                eqMat := VerticalJoin(eqMat,eqline);
                eqMat := EchelonForm(eqMat);
                eqMat := RowSubmatrixRange(eqMat,1 , Rank(eqMat));
                if Nrows(eqMat) eq n-2 then
                    break i1;
                end if;
            end for;
        end for;
    end for;
    print "dimensions of freedom in Sidel-Shesta", n-Nrows(eqMat);

    // Find a solution that we like
    for codeword in Dual(LinearCode(eqMat)) do
        firstEntry := codeword[1];
        if firstEntry eq 0 then
            continue codeword;
        else
            for i in [2..n] do
                if codeword[i] eq 0 or codeword[i] eq firstEntry then
                    continue codeword;
                end if;
            end for;
        end if;
        return codeword;
    end for;
    return false;
end function;